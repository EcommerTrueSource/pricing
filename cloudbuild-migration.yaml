steps:
# Executar migrações do Prisma no Cloud Run Jobs
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: 'executar-migracoes'
  entrypoint: 'gcloud'
  args:
    - 'run'
    - 'jobs'
    - 'deploy'
    - 'pricing-migration-job'
    - '--region=southamerica-east1'
    - '--image=southamerica-east1-docker.pkg.dev/${PROJECT_ID}/pricing-repo/pricing:latest'
    - '--memory=2Gi'
    - '--cpu=2'
    - '--max-retries=1'
    - '--task-timeout=30m'
    - '--set-cloudsql-instances=${PROJECT_ID}:southamerica-east1:pricing'
    - '--service-account=pricing-contract@${PROJECT_ID}.iam.gserviceaccount.com'
    - '--set-secrets=/secrets/.env.local=env_pricing:latest,DATABASE_URL=database_url_pricing:8'
    - '--update-env-vars=DOTENV_PATH=/secrets/.env.local,PRISMA_MIGRATE=true,DEBUG=prisma:*,NODE_OPTIONS=--max-old-space-size=1536'
    - '--command=bash'
    - '--args=-c "cd /app && echo \"Executando migrações do Prisma...\" && npx prisma migrate deploy"'

# Executar o job e capturar logs
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: 'iniciar-migracao'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      echo "Iniciando job de migração..."
      job_id=$(gcloud run jobs execute pricing-migration-job --region=southamerica-east1 --format="value(metadata.name)")
      echo "ID do job: $job_id"

      echo "Aguardando execução do job..."
      max_attempts=30
      attempt=1

      while [ $attempt -le $max_attempts ]; do
        echo "Verificando status (tentativa $attempt/$max_attempts)..."

        status=$(gcloud run jobs executions describe $job_id --region=southamerica-east1 --format="value(status)" 2>/dev/null || echo "PENDING")
        echo "Status: $status"

        if [ "$status" = "SUCCEEDED" ]; then
          echo "✅ Migração concluída com sucesso!"
          exit 0
        elif [ "$status" = "FAILED" ]; then
          echo "❌ Migração falhou!"

          # Exibir logs de erro
          echo "Logs de erro:"
          gcloud logging read "resource.type=cloud_run_job AND resource.labels.job_name=pricing-migration-job AND resource.labels.location=southamerica-east1 AND severity>=ERROR" --limit=50 --format="table(timestamp.datetime,severity,textPayload)"

          exit 1
        elif [ "$status" = "CANCELLED" ]; then
          echo "❌ Migração foi cancelada."
          exit 1
        fi

        attempt=$((attempt + 1))
        sleep 10
      done

      echo "❌ Timeout ao esperar pela migração."
      exit 1
  waitFor: ['executar-migracoes']
  timeout: '1800s'  # 30 minutos

timeout: '2000s'  # Timeout global

options:
  logging: CLOUD_LOGGING_ONLY
