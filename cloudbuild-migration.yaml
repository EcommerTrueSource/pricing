steps:
# Obter credenciais do banco de dados do Secret Manager
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: 'obter-credenciais'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      # Criar diretório para secrets
      mkdir -p /workspace/secrets

      # Obter senha do banco de dados
      echo "Obtendo senha do banco de dados..."
      gcloud secrets versions access latest --secret=pricing_db_password > /workspace/secrets/db_password

      # Obter usuário do banco (ou usar padrão se não existir)
      gcloud secrets versions access latest --secret=pricing_db_user > /workspace/secrets/db_user 2>/dev/null || echo "postgres" > /workspace/secrets/db_user

      # Obter nome do banco (ou usar padrão se não existir)
      gcloud secrets versions access latest --secret=pricing_db_name > /workspace/secrets/db_name 2>/dev/null || echo "pricing" > /workspace/secrets/db_name

      echo "Credenciais obtidas com sucesso"

# Iniciar o Cloud SQL Proxy
- name: 'gcr.io/cloudsql-docker/gce-proxy:latest'
  id: 'iniciar-sql-proxy'
  entrypoint: '/bin/sh'
  args:
    - '-c'
    - |
      # Criar diretório para o socket do Cloud SQL
      mkdir -p /workspace/cloudsql

      # Iniciar o proxy em background
      /cloud_sql_proxy \
        --dir=/workspace/cloudsql \
        --instances=${PROJECT_ID}:southamerica-east1:pricing=tcp:5432 \
        --daemon \
        --quiet

      echo "Cloud SQL Proxy iniciado em background"

      # Esperar o proxy iniciar completamente
      sleep 3

      # Verificar se o proxy está escutando
      if ! netstat -tulpn | grep :5432 > /dev/null; then
        echo "Erro: Cloud SQL Proxy não está escutando na porta 5432"
        exit 1
      fi

      echo "Cloud SQL Proxy verificado e está em execução"

# Executar migrações do Prisma
- name: 'southamerica-east1-docker.pkg.dev/${PROJECT_ID}/pricing-repo/pricing:latest'
  id: 'executar-migracao'
  waitFor: ['obter-credenciais', 'iniciar-sql-proxy']
  entrypoint: 'sh'
  args:
    - '-c'
    - |
      # Ler as credenciais dos arquivos
      DB_USER=$(cat /workspace/secrets/db_user)
      DB_PASSWORD=$(cat /workspace/secrets/db_password)
      DB_NAME=$(cat /workspace/secrets/db_name)

      # Executar o comando Prisma diretamente passando a string de conexão
      cd /app

      # Verificar conexão primeiro
      echo "Verificando conexão com o banco de dados..."
      npx prisma db pull --force --schema=/app/prisma/schema.prisma \
        --url="postgresql://$DB_USER:$DB_PASSWORD@localhost:5432/$DB_NAME?schema=public"

      # Verificar status da verificação
      if [ $? -ne 0 ]; then
        echo "Erro ao conectar ao banco de dados. Verificando detalhes..."
        nc -vz localhost 5432
        exit 1
      fi

      # Executar migração
      echo "Executando migração..."
      npx prisma migrate deploy --schema=/app/prisma/schema.prisma \
        --url="postgresql://$DB_USER:$DB_PASSWORD@localhost:5432/$DB_NAME?schema=public"

      # Verificar resultado da migração
      if [ $? -eq 0 ]; then
        echo "✅ Migração concluída com sucesso"
      else
        echo "❌ Falha na migração"
        exit 1
      fi

# Limpeza
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: 'limpeza'
  waitFor: ['executar-migracao']
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      echo "Realizando limpeza..."

      # Encerrar o Cloud SQL Proxy
      pkill -f cloud_sql_proxy || true

      # Remover diretórios temporários
      rm -rf /workspace/secrets /workspace/cloudsql

      echo "Limpeza concluída"

# Configuração global
timeout: '1800s'  # 30 minutos para todo o processo

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'  # Máquina com mais recursos para build eficiente
  dynamic_substitutions: true  # Suporte a substituições dinâmicas
