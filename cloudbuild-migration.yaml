steps:
# Aguardar tempo suficiente para o deploy finalizar
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: 'aguardar-deploy'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      echo "Aguardando tempo suficiente para o deploy finalizar (10 minutos)..."
      for i in {1..10}; do
        echo "⏳ Aguardando... $i/10 minutos"
        sleep 60
      done
      echo "✅ Tempo de espera concluído. Verificando imagem..."

# Verificar se existe uma imagem latest válida
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: 'verificar-imagem'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      echo "Verificando se existe uma imagem latest válida..."
      for i in {1..5}; do
        if gcloud container images describe southamerica-east1-docker.pkg.dev/${PROJECT_ID}/pricing-repo/pricing:latest > /dev/null 2>&1; then
          echo "✅ Imagem latest encontrada. Prosseguindo com a migração."
          exit 0
        else
          echo "⏳ Imagem latest ainda não encontrada. Aguardando mais... (tentativa $i/5)"
          sleep 60
        fi
      done

      echo "❌ Imagem latest não encontrada após várias tentativas. O pipeline de build pode ter falhado."
      exit 1
  waitFor: ['aguardar-deploy']

# Executar migrações com script de diagnóstico
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: 'executar-migracoes'
  entrypoint: 'gcloud'
  args:
    - 'run'
    - 'jobs'
    - 'deploy'
    - 'pricing-migration-job'
    - '--region=southamerica-east1'
    - '--image=southamerica-east1-docker.pkg.dev/${PROJECT_ID}/pricing-repo/pricing:latest'
    - '--memory=2Gi'
    - '--cpu=2'
    - '--max-retries=1'
    - '--task-timeout=30m'
    - '--set-cloudsql-instances=${PROJECT_ID}:southamerica-east1:pricing'
    - '--service-account=pricing-contract@${PROJECT_ID}.iam.gserviceaccount.com'
    - '--set-secrets=/secrets/.env.local=env_pricing:latest,DATABASE_URL=database_url_pricing:8'
    - '--update-env-vars=DOTENV_PATH=/secrets/.env.local,PRISMA_MIGRATE=true,DEBUG=prisma:*,NODE_OPTIONS=--max-old-space-size=1536'
    - '--command=bash'
    - '--args=-c "cd /app && echo \"Verificando configuração do Prisma...\" && npx prisma -v && npx prisma migrate deploy --create-only && echo \"Executando migração...\" && npx prisma migrate deploy"'
  waitFor: ['verificar-imagem']

# Executar o job e capturar logs
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk'
  id: 'iniciar-migracao'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      echo "Iniciando job de migração e capturando logs detalhados..."

      # Executar o job e capturar o ID
      echo "Executando o job de migração..."
      job_id=$(gcloud run jobs execute pricing-migration-job --region=southamerica-east1 --format="value(metadata.name)")
      echo "ID do job: $job_id"

      # Aguardar alguns segundos para o job iniciar
      echo "Aguardando o job iniciar..."
      sleep 10

      # Função para obter timestamp formatado para queries
      get_timestamp() {
        # Obter data atual em formato RFC3339
        date -u +"%Y-%m-%dT%H:%M:%SZ"
      }

      # Capturar logs e status
      start_time=$(get_timestamp)
      echo "Hora inicial de logs: $start_time"

      # Verificar status e exibir logs em loop
      for i in {1..20}; do
        echo ""
        echo "==== Verificando status da execução (tentativa $i/20) ===="

        # Obter status atual
        status=$(gcloud run jobs executions describe "$job_id" --region=southamerica-east1 --format="value(status)" 2>/dev/null || echo "DESCONHECIDO")
        echo "Status atual: $status"

        # Exibir logs recentes
        echo "Exibindo logs recentes:"
        gcloud logging read "resource.type=cloud_run_job AND resource.labels.job_name=pricing-migration-job AND resource.labels.location=southamerica-east1 AND timestamp>=\"$start_time\"" --limit=20 --format="table(timestamp.datetime,severity,textPayload)" 2>/dev/null || echo "Não foi possível obter logs"

        # Verificar se o job terminou
        if [ "$status" = "SUCCEEDED" ]; then
          echo "✅ Job concluído com sucesso!"
          exit 0
        elif [ "$status" = "FAILED" ]; then
          echo "❌ Job falhou!"
          echo "Detalhes da execução:"
          gcloud run jobs executions describe "$job_id" --region=southamerica-east1 2>/dev/null || echo "Não foi possível obter detalhes"
          exit 1
        fi

        # Atualizar timestamp para próxima consulta
        start_time=$(get_timestamp)
        sleep 30
      done

      echo "⚠️ Timeout ao aguardar conclusão do job."
      echo "Verifique os logs manualmente no Console do Cloud Run."
      exit 1
  waitFor: ['executar-migracoes']
  timeout: '1800s'  # 30 minutos de timeout

timeout: '2400s'  # 40 minutos de timeout global (aumentado para acomodar a espera)

options:
  logging: CLOUD_LOGGING_ONLY
