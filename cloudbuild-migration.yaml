steps:
# Executar migração diretamente no contêiner do Cloud Build
- name: 'gcr.io/cloud-builders/docker'
  id: 'executar-migracao'
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      # Obter DATABASE_URL do Secret Manager e montar como arquivo
      echo "Obtendo DATABASE_URL do Secret Manager..."
      mkdir -p /workspace/secrets
      gcloud secrets versions access latest --secret=database_url_pricing > /workspace/secrets/database_url

      # Validar se o arquivo foi criado corretamente
      if [ ! -s /workspace/secrets/database_url ]; then
        echo "❌ Falha ao obter DATABASE_URL do Secret Manager"
        exit 1
      fi

      echo "✅ Secret do banco de dados obtido com sucesso"

      # Criar arquivo de ambiente para o Docker
      cat > /workspace/secrets/.env << EOF
      PRISMA_MIGRATE=true
      DEBUG=prisma:*
      NODE_OPTIONS=--max-old-space-size=1536
      EOF

      # Anexar DATABASE_URL ao arquivo .env (sem exibi-lo nos logs)
      echo "DATABASE_URL=$(cat /workspace/secrets/database_url)" >> /workspace/secrets/.env

      echo "✅ Arquivo de ambiente criado"

      # Executar a migração usando a imagem da aplicação
      echo "Executando migração do Prisma..."
      docker run --rm \
        --env-file /workspace/secrets/.env \
        southamerica-east1-docker.pkg.dev/${PROJECT_ID}/pricing-repo/pricing:latest \
        /bin/sh -c "cd /app && echo '== VERIFICANDO BANCO ==' && echo \$DATABASE_URL | sed 's/:[^:]*@/:***@/g' && echo '== EXECUTANDO MIGRAÇÃO ==' && npx prisma migrate deploy --schema=prisma/schema.prisma"

      # Verificar resultado
      if [ $? -eq 0 ]; then
        echo "✅ Migração concluída com sucesso!"
      else
        echo "❌ Migração falhou"
        exit 1
      fi

# Configuração global
timeout: '1800s'  # 30 minutos para todo o build

options:
  logging: CLOUD_LOGGING_ONLY
  machineType: 'E2_HIGHCPU_8'  # Máquina com mais recursos para build eficiente
  dynamic_substitutions: true  # Suporte a substituições dinâmicas
