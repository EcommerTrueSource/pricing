generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider   = "postgresql"
  url        = env("DATABASE_URL")
  extensions = [uuid_ossp(map: "uuid-ossp", schema: "public")]
}

model users {
  id            String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email         String         @unique
  password_hash String?
  first_name    String
  last_name     String
  picture       String?
  roles         String[]       @default(["USER"])
  provider      String?        @default("local")
  provider_id   String?
  active        Boolean        @default(true)
  created_at    DateTime       @default(now()) @db.Timestamptz(6)
  updated_at    DateTime       @default(now()) @updatedAt @db.Timestamptz(6)
  invites_sent  user_invites[] @relation("SentBy")

  @@map("users")
}

model user_invites {
  id           String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  email        String
  token        String    @unique
  roles        String[]  @default(["USER"])
  expires_at   DateTime  @db.Timestamptz(6)
  accepted     Boolean   @default(false)
  created_at   DateTime  @default(now()) @db.Timestamptz(6)
  sent_by_id   String    @db.Uuid
  sent_by      users     @relation("SentBy", fields: [sent_by_id], references: [id])
  accepted_at  DateTime? @db.Timestamptz(6)

  @@index([token])
  @@index([email])
  @@map("user_invites")
}

model contracts {
  id                    String           @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  seller_id             String           @db.Uuid
  template_id           String           @db.Uuid
  status                contract_status  @default(DRAFT)
  content               String
  external_id           String?          @db.VarChar(255)
  signing_url           String?
  notification_attempts Int?             @default(0)
  last_notification_at  DateTime?        @db.Timestamptz(6)
  signed_at             DateTime?        @db.Timestamptz(6)
  expires_at            DateTime         @db.Timestamptz(6)
  created_at            DateTime?        @default(now()) @db.Timestamptz(6)
  updated_at            DateTime?        @default(now()) @db.Timestamptz(6)
  sellers               sellers          @relation(fields: [seller_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  templates             templates        @relation(fields: [template_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  notifications         notifications[]
  status_history        status_history[]

  @@index([seller_id], map: "idx_contracts_seller_id")
  @@index([status], map: "idx_contracts_status")
  @@index([template_id], map: "idx_contracts_template_id")
}

model notifications {
  id             String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  contract_id    String               @db.Uuid
  seller_id      String               @db.Uuid
  type           notification_type
  channel        notification_channel
  content        String
  status         notification_status  @default(PENDING)
  attempt_number Int                  @default(1)
  external_id    String?              @db.VarChar(255)
  sent_at        DateTime?            @db.Timestamptz(6)
  delivered_at   DateTime?            @db.Timestamptz(6)
  created_at     DateTime?            @default(now()) @db.Timestamptz(6)
  contracts      contracts            @relation(fields: [contract_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  sellers        sellers              @relation(fields: [seller_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([contract_id], map: "idx_notifications_contract_id")
  @@index([seller_id], map: "idx_notifications_seller_id")
  @@index([status], map: "idx_notifications_status")
}

model sellers {
  id            String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  cnpj          String          @unique @db.VarChar(14)
  razao_social  String          @db.VarChar(255)
  email         String          @db.VarChar(255)
  telefone      String          @db.VarChar(20)
  endereco      String?
  created_at    DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at    DateTime?       @default(now()) @updatedAt @db.Timestamptz(6)
  contracts     contracts[]
  notifications notifications[]

  @@map("sellers")
}

model status_history {
  id          String               @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  contract_id String               @db.Uuid
  from_status contract_status
  to_status   contract_status
  reason      status_change_reason
  metadata    Json?
  changed_at  DateTime?            @default(now()) @db.Timestamptz(6)
  created_at  DateTime?            @default(now()) @db.Timestamptz(6)
  contracts   contracts            @relation(fields: [contract_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([contract_id], map: "idx_status_history_contract_id")
}

model templates {
  id         String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name       String      @db.VarChar(255)
  content    String
  version    String      @db.VarChar(50)
  is_active  Boolean?    @default(true)
  created_at DateTime?   @default(now()) @db.Timestamptz(6)
  updated_at DateTime?   @default(now()) @db.Timestamptz(6)
  contracts  contracts[]
}

model system_settings {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  key           String    @unique
  value         String
  description   String?
  updated_at    DateTime  @default(now()) @updatedAt @db.Timestamptz(6)
  created_at    DateTime  @default(now()) @db.Timestamptz(6)

  @@index([key])
}

enum contract_status {
  DRAFT
  PENDING_SIGNATURE
  SIGNED
  EXPIRED
  CANCELLED
}

enum notification_channel {
  EMAIL
  WHATSAPP
}

enum notification_status {
  PENDING
  SENT
  DELIVERED
  FAILED
}

enum notification_type {
  SIGNATURE_REMINDER
  CONTRACT_EXPIRING
  CONTRACT_SIGNED
  CONTRACT_EXPIRED
}

enum status_change_reason {
  CREATED
  SENT_TO_SIGNATURE
  SIGNED
  EXPIRED
  CANCELLED
}
